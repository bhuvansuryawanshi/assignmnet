name: Build and Push Docker Image

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/python-app
        tags: |
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Stop and remove existing container if running
          docker stop python-app || true
          docker rm -f python-app || true

          # Prune unused containers & networks
          docker container prune -f
          docker network prune -f

          # Kill any lingering process holding port 5000
          if sudo lsof -t -i:5000; then
            echo "Port 5000 is busy, killing process..."
            sudo lsof -t -i:5000 | xargs -r sudo kill -9
          fi

          # Double check port is free
          if sudo lsof -i:5000; then
            echo "ERROR: Port 5000 still in use!"
            exit 1
          fi

          # Pull the latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/python-app:latest
          
          # Run the new container with environment variables
          docker run -d -p 5000:5000 \
            --name python-app \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASS=${{ secrets.DB_PASS }} \
            ${{ secrets.DOCKER_USERNAME }}/python-app:latest
          
          # Wait a moment for container to start
          sleep 5
          
          # Check if container is running
          if docker ps | grep -q python-app; then
            echo "Container deployed successfully!"
            echo "Application URL: http://${{ secrets.SSH_HOST }}:5000"
            echo "Click here to access: http://${{ secrets.SSH_HOST }}:5000"
          else
            echo "Container failed to start"
            docker logs python-app
            exit 1
          fi